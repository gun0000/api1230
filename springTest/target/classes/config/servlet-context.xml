<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<!-- web.xml 에서 DispatcherServlet 의 설정을 기록하는 파일 -->
	<!-- servelt 각자의 Bean들이 모인 공간 => root-context는 공통 ! servlet-context는 개별! web.xml에서 작성한 DispatcherServlet의 설정을 기록하는 파일  -->
	<!-- root-context : 이 context에 등록되는 Bean들은 모든 context에서 사용되어 진다.(공유가 가능하다) 
		servlet-context : 이 context에 등록되는 Bean들은 servlet-container에만 사용되어진다. -->
		
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven /><!-- @을 쓰겠다 빈으로 등록하겠다 -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 
			resources는	css, image등은 서버에서 실행되는게 아니라 클라이언트의 브라우저에서 실행된다.
		즉, front controlle를 거치지 않고, Direct로 이동이 필요하다. 따라서, resources를 프론트컨트롤러를 거치지 않고 바로 이동시키기 위해 맵핑을 해주는 것이다.
		<img src = "${root}/resources/image/a.jpg"> 가 호출되면 구지 Spring에게 요청하는게 아니라 위의 경로에 있는 이미지를 바로 보여주는 것이다.
	 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"><!-- 스프링이 객체생성해줌 -->
		<beans:property name="prefix" value="/WEB-INF/views/" /><!-- 경로 앞단 -->
		<beans:property name="suffix" value=".jsp" /><!-- 경로 뒤단  이걸 조합해서 풀경로로 만든다 중단은 DispatcherServlet 가져와서 합쳐준다 컨트롤러에 리턴값을 가져온다-->
	</beans:bean>
	<!-- 
			View Resolver는 사용자가 요청하게 되면,
		아래 그림과 같이 Dispatcher(FrontController)에게 경로를 주게 된다.
		만일 ViewResolver 에게 전달된 String 값이 "list"였다면 prefix인 WEB-INF/views/를 앞에 더하고 
		suffix인 .jsp를 뒤에 더하여 WEB-INF/views/list.jsp를 리턴하게 된다. 따라서, 이 경로에 list.jsp파일이 생성되어있는지 확인해야 한다
	 -->
	<!-- 파일업로드시 multipart 받는 resolver 클래스 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
	</beans:bean>
	<!-- 파일업로드 경로 -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="D:/dev1230/uploadFiles"/>
	</beans:bean>
	
	<!-- 인터셉터 인증아이디 객체생성  !로그인을 하지않으면 글쓰기나 글수정등을 쓸수없으니 로그인페이지로 보내주고 로그인이 되면 글쓰기나 글수정등의 페이지를 보여준다-->
	<beans:bean id="authInterceptor" class="com.myezen.myapp.Interceptor.AuthInterceptor"></beans:bean>
	<!-- 인터셉터 로그인-->
	<beans:bean id="loginInterceptor" class="com.myezen.myapp.Interceptor.LoginInterceptor"></beans:bean>
	<!-- 인터셉터: 인증인터셉터  -->
	<interceptors>
		<interceptor><!-- 로그인이 필요한 페이지에 로그인페이지 띄어주기 	-->
			<mapping path="/board/boardWrite.do"/><!-- 인터셉터 맵핑 --><!-- 이쪽으로 가겠다 -->
			<mapping path="/board/boardModify.do"/>
			<mapping path="/board/boardReply.do"/>
			<mapping path="/board/boardDelete.do"/>
			<beans:ref bean="authInterceptor"/><!-- 어떤빈을 걸어줄래? -->
		</interceptor>
		<interceptor><!--  로그인하면 세션값을 담기  -->
			<mapping path="/member/memberLoginAction.do"/><!-- 인터셉터 맵핑 --><!-- 이쪽으로 가겠다 -->
			<beans:ref bean="loginInterceptor"/><!-- 어떤빈을 걸어줄래? -->
		</interceptor>
	</interceptors>
	



	
	
	
	<context:component-scan base-package="com.myezen.myapp.controller" /><!-- com.myezen.myapp밑에있는걸 다 스캔하겠다 빈을 찾겠다 -->
	<!-- 
		base-package는 패키지를 어디부터 스캔할지 지정해주는 부분이다. 스캔할 패키지를 여러개로 지정해줄 수도 있다.
		
		만일 404가 뜬다면, 1순위로 의심해봐야한다
	context:component-scan은 Spring이 관리할 bean의 위치를 지정한다.
	따라서, 사용할 패키지명을 잘 확인해야 하고, 위의 코드에선, com.myezen.myapp안의 사용할 컨트롤러에 @Controller 를 등록해 이 bean을 사용한다고 지정한다.
	 -->
	
</beans:beans>
